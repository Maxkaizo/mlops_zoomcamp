id: load_data_nyc_scheduled
namespace: mlops_zoomcamp

description: |
  Scheduled workflow to load and preprocess NYC taxi data monthly.

triggers:
  - id: monthly-trigger
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "0 5 1 * *"  # DÃ­a 1 de cada mes a las 05:00 UTC

tasks:
  - id: load_data
    type: io.kestra.plugin.scripts.python.Commands
    containerImage: python:3.11-slim
    namespaceFiles:
      enabled: true
    commands:
      - pip install pandas pyarrow python-dateutil
      - python 04_load_data_scheduled.py --exec_date={{ trigger.date | date('yyyy-MM-dd') }}
    outputFiles:
      - df_train.parquet
      - df_val.parquet


  - id: vectorize_data
    type: io.kestra.plugin.scripts.python.Commands
    containerImage: python:3.11-slim
    namespaceFiles:
      enabled: true
    beforeCommands:
      - pip install pandas scikit-learn scipy joblib pyarrow
      - "echo \"Train path: {{render(outputs.load_data.outputFiles['df_train.parquet'])}}\""
      - "echo \"Val path: {{render(outputs.load_data.outputFiles['df_val.parquet'])}}\""
    commands:
      - python 02_vectorize.py --train_path={{render(outputs.load_data.outputFiles["df_train.parquet"])}} --val_path={{render(outputs.load_data.outputFiles["df_val.parquet"])}}

    outputFiles:
      - dv.pkl
      - X_train.npz
      - X_val.npz
      - y_train.npy
      - y_val.npy

  - id: train_model
    type: io.kestra.plugin.docker.Run
    containerImage: python:3.11-slim
    networkMode: host
    pullPolicy: IF_NOT_PRESENT
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /workspaces/mlops_zoomcamp/03_orchestration/kestra/mlflow:/mlflow
    namespaceFiles:
      enabled: true
    commands:
      - "/bin/sh"
      - "-c"
      - |
        pip install xgboost scikit-learn mlflow joblib numpy && \
        echo "MLflow URI: {{ kv('MLFLOW_TRACKING_URI') }}" && \
        python 03_train_model.py \
          --mlflow_uri={{ kv('MLFLOW_TRACKING_URI') }} \
          --experiment=nyc-taxi-experiment \
          --train_path={{ outputs.vectorize_data.outputFiles["X_train.npz"] }} \
          --train_target={{ outputs.vectorize_data.outputFiles["y_train.npy"] }} \
          --val_path={{ outputs.vectorize_data.outputFiles["X_val.npz"] }} \
          --val_target={{ outputs.vectorize_data.outputFiles["y_val.npy"] }} \
          --dv_path={{ outputs.vectorize_data.outputFiles["dv.pkl"] }}
    outputFiles:
      - model.json
